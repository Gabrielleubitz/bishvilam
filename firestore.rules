rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { 
      return request.auth != null; 
    }
    
    function isAdmin() { 
      return isSignedIn() && 
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == "admin"; 
    }
    
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Events - public read for published, admin write
    match /events/{eventId} {
      allow read: if resource.data.publish == true || isAdmin();
      allow write: if isAdmin();
    }

    // User profiles - users can read/update own, admin can do all
    match /profiles/{uid} {
      allow read: if isOwner(uid) || isAdmin();
      allow update: if isOwner(uid) || isAdmin();
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow write: if isAdmin();
    }

    // Admin can read all profiles for user management
    match /profiles/{uid} {
      allow read: if isAdmin();
    }

    // Registrations - users can create and read own, admin can do all
    match /registrations/{registrationId} {
      allow create: if isSignedIn();
      allow read, update: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Media - public read, admin write
    match /media/{mediaId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Consents - users can read/write own, admin can do all
    match /consents/{consentId} {
      allow read, write: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
    }
  }
}